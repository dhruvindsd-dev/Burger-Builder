{"version":3,"sources":["components/UI/Input/Input.js","components/UI/Error/ErrorBox.js","containers/Auth/Auth.js"],"names":["Input","props","inputElement","invalidClass","valid","touched","elementType","onChange","change","value","className","config","label","ErrorBox","msg","Auth","state","isLoading","orderForm","email","validation","required","elementConfig","type","placeholder","password","minlength","formIsValid","isSignUp","errorMsg","redirect","checkValidity","rules","isValid","maxlength","length","trim","inputChangehandler","inputIdentifier","event","updatedOrderForm","updatedFormElement","target","isFormValid","item","setState","onSubmitHandler","authenticateUser","then","history","push","catch","error","console","log","data","message","redirectParam","URLSearchParams","this","location","search","get","match","params","Object","keys","map","bind","disabled","onClick","to","Component","withRouter","connect","dispatch","route","authenticate"],"mappings":"sKAEe,SAASA,EAAMC,GAC5B,IAAIC,EAAe,KACfC,EAAe,GAKnB,QAJKF,EAAMG,OAASH,EAAMI,UACxBF,EAAe,aAGTF,EAAMK,aACZ,IAAK,WACHJ,EACE,sCACEK,SAAUN,EAAMO,OAChBC,MAAOR,EAAMQ,MACbC,UAAW,YAAcP,GACrBF,EAAMU,SAGd,MACF,QACET,EACE,mCACEK,SAAUN,EAAMO,OAChBC,MAAOR,EAAMQ,MACbC,UAAW,SAAWP,GAClBF,EAAMU,SAIlB,OACE,sBAAKD,UAAU,QAAf,UACE,uBAAOA,UAAU,QAAjB,SAA0BT,EAAMW,QAChC,qBAAKF,UAAU,UAAf,SAA0BR,S,sHC/BjB,SAASW,EAAT,GAA4B,IAARC,EAAO,EAAPA,IACjC,OACE,qBAAKJ,UAAU,kCAAf,SACE,mBAAGA,UAAU,YAAb,SAA0BI,M,oBCE1BC,E,4MACJC,MAAQ,CACNC,WAAW,EACXC,UAAW,CACTC,MAAO,CACLb,YAAa,QACbG,MAAO,GACPJ,SAAS,EACTD,OAAO,EACPgB,WAAY,CACVC,UAAU,GAEZC,cAAe,CACbC,KAAM,QACNC,YAAa,gCAGjBC,SAAU,CACRnB,YAAa,QACbG,MAAO,GACPJ,SAAS,EACTD,OAAO,EACPgB,WAAY,CACVC,UAAU,EACVK,UAAW,GAEbJ,cAAe,CACbC,KAAM,WACNC,YAAa,6BAInBG,aAAa,EACbC,UAAU,EACVC,SAAU,GACVC,SAAU,I,EAGZC,cAAgB,SAACC,EAAOvB,GACtB,IAAIwB,GAAU,EAUd,OATID,EAAME,YACRD,EAAUxB,EAAM0B,QAAUH,EAAME,WAAaD,GAE3CD,EAAMX,WACRY,EAA2B,KAAjBxB,EAAM2B,QAAiBH,GAE/BD,EAAMN,YACRO,EAAUxB,EAAM0B,QAAUH,EAAMN,WAAaO,GAExCA,G,EAETI,mBAAqB,SAACC,EAAiBC,GACrC,IAAMC,EAAgB,eACjB,EAAKxB,MAAME,WAEVuB,EAAkB,eACnBD,EAAiBF,IAEtBG,EAAmBhC,MAAQ8B,EAAMG,OAAOjC,MACxC+B,EAAiBF,GAAmBG,EACpCA,EAAmBrC,MAAQ,EAAK2B,cAC9BU,EAAmBrB,WACnBqB,EAAmBhC,OAErBgC,EAAmBpC,SAAU,EAE7B,IAAIsC,GAAc,EAClB,IAAK,IAAIC,KAAQJ,EACf,IAAKA,EAAiBI,GAAMxC,MAAO,CACjCuC,GAAc,EACd,MAGJ,EAAKE,SAAS,CACZ3B,UAAWsB,EACXb,YAAagB,K,EAGjBG,gBAAkB,WAChB,EAAKD,SAAS,CAAE5B,WAAW,IAC3B,EAAKhB,MACF8C,iBACC,EAAK/B,MAAMY,SACX,EAAKZ,MAAME,UAAUC,MAAMV,MAC3B,EAAKO,MAAME,UAAUO,SAAShB,OAE/BuC,MAAK,WACJ,EAAK/C,MAAMgD,QAAQC,KAAnB,WAA4B,EAAKlC,MAAMc,cAExCqB,OAAM,SAACC,GACNC,QAAQC,IAAI,kBACZ,EAAKT,SAAS,CAAE5B,WAAW,EAAOY,SAAUuB,EAAMG,KAAKH,MAAMI,c,kEAIjE,IAAMC,EAAgB,IAAIC,gBAAgBC,KAAK1D,MAAM2D,SAASC,QAAQC,IACpE,YAGU,UADCH,KAAK1D,MAAM8D,MAAMC,OAAOzC,MACZoC,KAAK3C,MAAMY,UAClC+B,KAAKd,SAAS,CAAEjB,UAAU,EAAME,SAAU2B,M,2CAI5C,IAAIlC,EAAOoC,KAAK1D,MAAM8D,MAAMC,OAAOzC,KACvB,UAARA,GAAoBoC,KAAK3C,MAAMY,UACjC+B,KAAKd,SAAS,CACZjB,UAAU,EACVC,SAAU,KAGF,UAARN,GAAqBoC,KAAK3C,MAAMY,UAClC+B,KAAKd,SAAS,CACZjB,UAAU,EACVC,SAAU,O,+BAIN,IAAD,OACP,OACE,qBAAKnB,UAAU,OAAf,SACE,qBAAKA,UAAU,YAAf,SACE,qBAAKA,UAAU,YAAf,SACE,qBAAKA,UAAU,sBAAf,SACE,sBAAKA,UAAU,cAAf,UACE,mBAAGA,UAAU,oCAAb,SACE,sBAAMA,UAAU,iBAAhB,SACE,mBAAGA,UAAU,wBAGjB,mBAAGA,UAAU,qEAAb,SACGiD,KAAK3C,MAAMY,SAAW,UAAY,YAErC,uBACG+B,KAAK3C,MAAMa,SACZ,cAAChB,EAAD,CAAUC,IAAK6C,KAAK3C,MAAMa,WACxB,KACHoC,OAAOC,KAAKP,KAAK3C,MAAME,WAAWiD,KAAI,SAACvB,GACtC,OACE,cAAC5C,EAAA,EAAD,CAEEI,MAAO,EAAKY,MAAME,UAAU0B,GAAMxC,MAClCQ,MAAOgC,EACPjC,OAAQ,EAAKK,MAAME,UAAU0B,GAAMtB,cACnCb,MAAO,EAAKO,MAAME,UAAU0B,GAAMnC,MAClCH,YAAa,EAAKU,MAAME,UAAU0B,GAAMtC,YACxCD,QAAS,EAAKW,MAAME,UAAU0B,GAAMvC,QACpCG,OAAQ,EAAK6B,mBAAmB+B,KAAK,EAAMxB,IAPtCA,MAWX,qBAAKlC,UAAU,UAAf,SACE,wBACE2D,UAAWV,KAAK3C,MAAMW,YACtB2C,QAASX,KAAKb,gBACdpC,UACE,+BACCiD,KAAK3C,MAAMC,UAAY,aAAe,IAL3C,sBAWD0C,KAAK3C,MAAMY,SACV,cAAC,IAAD,CAAM2C,GAAE,4BAAuBZ,KAAK3C,MAAMc,UAA1C,6DAIA,cAAC,IAAD,CAAMyC,GAAE,4BAAuBZ,KAAK3C,MAAMc,UAA1C,wE,GAxKC0C,aA+LJC,sBAAWC,aAVF,SAAC1D,GACvB,MAAO,MAEkB,SAAC2D,GAC1B,MAAO,CACL5B,iBAAkB,SAACnB,EAAUT,EAAOM,EAAUmD,GAC5C,OAAOD,EAASE,YAAajD,EAAUT,EAAOM,EAAUmD,QAIpCF,CAA6C3D","file":"static/js/3.157e21ac.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport default function Input(props) {\r\n  let inputElement = null;\r\n  let invalidClass = \"\";\r\n  if (!props.valid && props.touched) {\r\n    invalidClass = \"is-danger\";\r\n  }\r\n\r\n  switch (props.elementType) {\r\n    case \"textarea\":\r\n      inputElement = (\r\n        <textarea\r\n          onChange={props.change}\r\n          value={props.value}\r\n          className={\"textarea \" + invalidClass}\r\n          {...props.config}\r\n        />\r\n      );\r\n      break;\r\n    default:\r\n      inputElement = (\r\n        <input\r\n          onChange={props.change}\r\n          value={props.value}\r\n          className={\"input \" + invalidClass}\r\n          {...props.config}\r\n        />\r\n      );\r\n  }\r\n  return (\r\n    <div className=\"field\">\r\n      <label className=\"label\">{props.label}</label>\r\n      <div className=\"control\">{inputElement}</div>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nexport default function ErrorBox({ msg }) {\r\n  return (\r\n    <div className=\"notification is-danger is-light\">\r\n      <p className=\"is-size-5\">{msg}</p>\r\n    </div>\r\n  );\r\n}\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { withRouter } from \"react-router\";\r\nimport { Link } from \"react-router-dom\";\r\nimport ErrorBox from \"../../components/UI/Error/ErrorBox\";\r\nimport Input from \"../../components/UI/Input/Input\";\r\nimport { authenticate } from \"../../store/actions/auth\";\r\nclass Auth extends Component {\r\n  state = {\r\n    isLoading: false,\r\n    orderForm: {\r\n      email: {\r\n        elementType: \"input\",\r\n        value: \"\",\r\n        touched: false,\r\n        valid: false,\r\n        validation: {\r\n          required: true,\r\n        },\r\n        elementConfig: {\r\n          type: \"email\",\r\n          placeholder: \"Enter your email address...\",\r\n        },\r\n      },\r\n      password: {\r\n        elementType: \"input\",\r\n        value: \"\",\r\n        touched: false,\r\n        valid: false,\r\n        validation: {\r\n          required: true,\r\n          minlength: 6,\r\n        },\r\n        elementConfig: {\r\n          type: \"password\",\r\n          placeholder: \"Please enter a password\",\r\n        },\r\n      },\r\n    },\r\n    formIsValid: false,\r\n    isSignUp: false,\r\n    errorMsg: \"\",\r\n    redirect: \"\",\r\n  };\r\n\r\n  checkValidity = (rules, value) => {\r\n    let isValid = true;\r\n    if (rules.maxlength) {\r\n      isValid = value.length <= rules.maxlength && isValid;\r\n    }\r\n    if (rules.required) {\r\n      isValid = value.trim() !== \"\" && isValid;\r\n    }\r\n    if (rules.minlength) {\r\n      isValid = value.length >= rules.minlength && isValid;\r\n    }\r\n    return isValid;\r\n  };\r\n  inputChangehandler = (inputIdentifier, event) => {\r\n    const updatedOrderForm = {\r\n      ...this.state.orderForm,\r\n    };\r\n    const updatedFormElement = {\r\n      ...updatedOrderForm[inputIdentifier],\r\n    };\r\n    updatedFormElement.value = event.target.value;\r\n    updatedOrderForm[inputIdentifier] = updatedFormElement;\r\n    updatedFormElement.valid = this.checkValidity(\r\n      updatedFormElement.validation,\r\n      updatedFormElement.value\r\n    );\r\n    updatedFormElement.touched = true;\r\n\r\n    let isFormValid = true;\r\n    for (let item in updatedOrderForm) {\r\n      if (!updatedOrderForm[item].valid) {\r\n        isFormValid = false;\r\n        break;\r\n      }\r\n    }\r\n    this.setState({\r\n      orderForm: updatedOrderForm,\r\n      formIsValid: isFormValid,\r\n    });\r\n  };\r\n  onSubmitHandler = () => {\r\n    this.setState({ isLoading: true });\r\n    this.props\r\n      .authenticateUser(\r\n        this.state.isSignUp,\r\n        this.state.orderForm.email.value,\r\n        this.state.orderForm.password.value\r\n      )\r\n      .then(() => {\r\n        this.props.history.push(`/${this.state.redirect}`);\r\n      })\r\n      .catch((error) => {\r\n        console.log(\"in catch error\");\r\n        this.setState({ isLoading: false, errorMsg: error.data.error.message });\r\n      });\r\n  };\r\n  componentDidMount() {\r\n    const redirectParam = new URLSearchParams(this.props.location.search).get(\r\n      \"redirect\"\r\n    );\r\n    const type = this.props.match.params.type;\r\n    if (type == \"signup\" && !this.state.isSignUp) {\r\n      this.setState({ isSignUp: true, redirect: redirectParam });\r\n    }\r\n  }\r\n  componentDidUpdate() {\r\n    let type = this.props.match.params.type;\r\n    if (type == \"signin\" && this.state.isSignUp) {\r\n      this.setState({\r\n        isSignUp: false,\r\n        errorMsg: \"\",\r\n      });\r\n    }\r\n    if (type == \"signup\" && !this.state.isSignUp) {\r\n      this.setState({\r\n        isSignUp: true,\r\n        errorMsg: \"\",\r\n      });\r\n    }\r\n  }\r\n  render() {\r\n    return (\r\n      <div className=\"hero\">\r\n        <div className=\"hero-body\">\r\n          <div className=\"container\">\r\n            <div className=\"columns is-centered\">\r\n              <div className=\"column is-5\">\r\n                <p className=\"has-text-centered has-text-danger\">\r\n                  <span className=\"icon is-size-1\">\r\n                    <i className=\"fas fa-cannabis\" />\r\n                  </span>\r\n                </p>\r\n                <p className=\"has-text-dark is-size-4 has-text-centered has-text-weight-semibold\">\r\n                  {this.state.isSignUp ? \"Sign-Up\" : \"Sign-In\"}\r\n                </p>\r\n                <br />\r\n                {!!this.state.errorMsg ? (\r\n                  <ErrorBox msg={this.state.errorMsg} />\r\n                ) : null}\r\n                {Object.keys(this.state.orderForm).map((item) => {\r\n                  return (\r\n                    <Input\r\n                      key={item}\r\n                      valid={this.state.orderForm[item].valid}\r\n                      label={item}\r\n                      config={this.state.orderForm[item].elementConfig}\r\n                      value={this.state.orderForm[item].value}\r\n                      elementType={this.state.orderForm[item].elementType}\r\n                      touched={this.state.orderForm[item].touched}\r\n                      change={this.inputChangehandler.bind(this, item)}\r\n                    />\r\n                  );\r\n                })}\r\n                <div className=\"buttons\">\r\n                  <button\r\n                    disabled={!this.state.formIsValid}\r\n                    onClick={this.onSubmitHandler}\r\n                    className={\r\n                      \"button is-dark is-outlined \" +\r\n                      (this.state.isLoading ? \"is-loading\" : \"\")\r\n                    }\r\n                  >\r\n                    Submit\r\n                  </button>\r\n                </div>\r\n                {this.state.isSignUp ? (\r\n                  <Link to={`./signin?redirect=${this.state.redirect}`}>\r\n                    Aldready Have A Account ? Click Here To Sign In\r\n                  </Link>\r\n                ) : (\r\n                  <Link to={`./signup?redirect=${this.state.redirect}`}>\r\n                    Dont Have A Account ? Click Here To Sign Up\r\n                  </Link>\r\n                )}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {};\r\n};\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    authenticateUser: (isSignUp, email, password, route) => {\r\n      return dispatch(authenticate(isSignUp, email, password, route));\r\n    },\r\n  };\r\n};\r\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(Auth));\r\n"],"sourceRoot":""}