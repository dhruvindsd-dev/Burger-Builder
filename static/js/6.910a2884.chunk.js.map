{"version":3,"sources":["containers/Orders/Orders.js"],"names":["Orders","state","isLoading","previousOrder","fetchOrders","Axios","get","props","userId","authToken","handleCacheAndStare","data","Object","keys","map","item","setState","cacheOrders","this","orders","then","response","order","index","className","totalPrice","toFixed","burgerIngredients","ing","i","deliveryDetials","deliveryDtail","Component","connect","auth","cache","dispatch","orderData","type","CACHE_ORDERS","payload"],"mappings":"8MAKMA,E,4MACJC,MAAQ,CACNC,WAAW,EACXC,cAAe,M,EAEjBC,YAAc,WACZ,OAAOC,IAAMC,IAAN,yDAC6C,EAAKC,MAAMC,OADxD,sBAC4E,EAAKD,MAAME,a,EAGhGC,oBAAsB,SAACC,GACrB,GAAIA,EAAM,CACR,IAAMR,EAAgBS,OAAOC,KAAKF,GAAMG,KAAI,SAACC,GAC3C,OAAOJ,EAAKI,MAEd,EAAKC,SAAS,CAAEb,cAAeA,EAAeD,WAAW,IACzD,EAAKK,MAAMU,YAAYd,QAEvB,EAAKa,SAAS,CACZd,WAAW,K,kEAII,IAAD,OAGbgB,KAAKX,MAAMY,QAKdD,KAAKF,SAAS,CACZb,cAAee,KAAKX,MAAMY,OAC1BjB,WAAW,IAEbgB,KAAKd,cAAcgB,MAAK,SAACC,GACvB,EAAKX,oBAAoBW,EAASV,UATpCO,KAAKd,cAAcgB,MAAK,SAACC,GACvB,EAAKX,oBAAoBW,EAASV,W,+BAatC,IAAIW,EAoDJ,OAFEA,EAjDGJ,KAAKjB,MAAMC,UAiDN,cAAC,IAAD,IAhDJgB,KAAKjB,MAAME,cACLe,KAAKjB,MAAME,cAAcW,KAAI,SAACC,EAAMQ,GAC1C,OACE,qBAAiBC,UAAU,cAA3B,SACE,sBAAKA,UAAU,0BAAf,UACE,oBAAGA,UAAU,iCAAb,yBACeT,EAAKU,WAAWC,QAAQ,MAEvC,sBAAKF,UAAU,YAAf,0BAEE,qBAAKA,UAAU,eAAf,SACGZ,OAAOC,KAAKE,EAAKY,mBAAmBb,KAAI,SAACc,EAAKC,GAC7C,OAASd,EAAKY,kBAAkBC,GAC9B,yBAEEJ,UAAU,sCAFZ,UAIGI,EAJH,MAIWb,EAAKY,kBAAkBC,KAH3BC,GAKL,aAIV,qBAAKL,UAAU,OAAf,SACGZ,OAAOC,KAAKE,EAAKe,iBAAiBhB,KAAI,SAACiB,EAAeF,GACrD,OACE,8BACGE,EADH,MACqBhB,EAAKe,gBAAgBC,KADlCF,YAvBRN,MAoCZ,oBAAGC,UAAU,kDAAb,UACE,uFACA,sBAAMA,UAAU,WAAhB,SACE,mBAAGA,UAAU,yBASrB,sBAAKA,UAAU,UAAf,UACE,mBAAGA,UAAU,sBAAb,0BACA,qBAAKA,UAAU,uBAAf,SAAuCF,W,GAhG1BU,aAuHNC,uBAjBS,SAAChC,GACvB,MAAO,CACLQ,UAAWR,EAAMiC,KAAKzB,UACtBU,OAAQlB,EAAMkC,MAAMhB,OACpBX,OAAQP,EAAMiC,KAAK1B,WAGI,SAAC4B,GAC1B,MAAO,CACLnB,YAAa,SAACoB,GACZD,EAAS,CACPE,KAAMC,IACNC,QAAS,CAAErB,OAAQkB,SAKZJ,CAA6CjC","file":"static/js/6.910a2884.chunk.js","sourcesContent":["import Axios from \"axios\";\r\nimport React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport Loader from \"../../components/UI/Loader/Loader\";\r\nimport { CACHE_ORDERS } from \"../../store/actions/actions\";\r\nclass Orders extends Component {\r\n  state = {\r\n    isLoading: true,\r\n    previousOrder: null,\r\n  };\r\n  fetchOrders = () => {\r\n    return Axios.get(\r\n      `https://recipe-app-ab93d.firebaseio.com/orders/${this.props.userId}.json?auth=${this.props.authToken}`\r\n    );\r\n  };\r\n  handleCacheAndStare = (data) => {\r\n    if (data) {\r\n      const previousOrder = Object.keys(data).map((item) => {\r\n        return data[item];\r\n      });\r\n      this.setState({ previousOrder: previousOrder, isLoading: false });\r\n      this.props.cacheOrders(previousOrder);\r\n    } else {\r\n      this.setState({\r\n        isLoading: false,\r\n      });\r\n    }\r\n  };\r\n  componentDidMount() {\r\n    // first request show loader and fetch\r\n    // second request dont show loader, instead load from cache and check for changes, if any changes only then update... (better ux )\r\n    if (!this.props.orders) {\r\n      this.fetchOrders().then((response) => {\r\n        this.handleCacheAndStare(response.data);\r\n      });\r\n    } else {\r\n      this.setState({\r\n        previousOrder: this.props.orders,\r\n        isLoading: false,\r\n      });\r\n      this.fetchOrders().then((response) => {\r\n        this.handleCacheAndStare(response.data);\r\n      });\r\n    }\r\n  }\r\n  render() {\r\n    let order;\r\n    if (!this.state.isLoading) {\r\n      if (this.state.previousOrder) {\r\n        order = this.state.previousOrder.map((item, index) => {\r\n          return (\r\n            <div key={index} className=\"column is-3\">\r\n              <div className=\"notification blue-hover\">\r\n                <p className=\"is-size-4 has-text-weight-bold\">\r\n                  Total Price {item.totalPrice.toFixed(2)}\r\n                </p>\r\n                <div className=\"is-size-4\">\r\n                  Ingredients :\r\n                  <div className=\"buttons mt-2\">\r\n                    {Object.keys(item.burgerIngredients).map((ing, i) => {\r\n                      return !!item.burgerIngredients[ing] ? (\r\n                        <button\r\n                          key={i}\r\n                          className=\"button is-outlined is-dark is-small\"\r\n                        >\r\n                          {ing} : {item.burgerIngredients[ing]}\r\n                        </button>\r\n                      ) : null;\r\n                    })}\r\n                  </div>\r\n                </div>\r\n                <div className=\"mt-3\">\r\n                  {Object.keys(item.deliveryDetials).map((deliveryDtail, i) => {\r\n                    return (\r\n                      <p key={i}>\r\n                        {deliveryDtail} : {item.deliveryDetials[deliveryDtail]}\r\n                      </p>\r\n                    );\r\n                  })}\r\n                </div>\r\n              </div>\r\n            </div>\r\n          );\r\n        });\r\n      } else {\r\n        // there is no previous order\r\n        order = (\r\n          <p className=\"section has-text-centered has-text-danger title\">\r\n            <span>You have not ordered any delicious butger till date</span>\r\n            <span className=\"icon m-3\">\r\n              <i className=\"fas fa-sad-tear\"></i>\r\n            </span>\r\n          </p>\r\n        );\r\n      }\r\n    } else {\r\n      order = <Loader></Loader>;\r\n    }\r\n    return (\r\n      <div className=\"section\">\r\n        <p className=\"title has-text-dark\">Your Orders </p>\r\n        <div className=\"columns is-multiline\">{order}</div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    authToken: state.auth.authToken,\r\n    orders: state.cache.orders,\r\n    userId: state.auth.userId,\r\n  };\r\n};\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    cacheOrders: (orderData) => {\r\n      dispatch({\r\n        type: CACHE_ORDERS,\r\n        payload: { orders: orderData },\r\n      });\r\n    },\r\n  };\r\n};\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Orders);\r\n"],"sourceRoot":""}