{"version":3,"sources":["components/UI/Input/Input.js","containers/Checkout/Checkout.js"],"names":["Input","props","inputElement","invalidClass","valid","touched","elementType","onChange","change","value","className","config","label","Checkout","state","orderForm","Name","validation","required","maxlength","elementConfig","type","placeholder","Address","orderFormIsValid","isLoading","checkValidity","rules","isValid","length","trim","inputChangehandler","inputIdentifier","event","updatedOrderForm","updatedFormElement","target","isFormValid","item","setState","orderHandler","formData","burgerIngredients","ingredients","totalPrice","deliveryDetials","Object","keys","map","userEmail","console","log","userId","Axios","post","token","then","response","resetBurger","history","push","error","this","bind","disabled","onClick","Component","withRouter","connect","burger","auth","authToken","dispatch","actionTypes"],"mappings":"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","file":"static/js/4.d5a5ca4c.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport default function Input(props) {\r\n  let inputElement = null;\r\n  let invalidClass = \"\";\r\n  if (!props.valid && props.touched) {\r\n    invalidClass = \"is-danger\";\r\n  }\r\n\r\n  switch (props.elementType) {\r\n    case \"textarea\":\r\n      inputElement = (\r\n        <textarea\r\n          onChange={props.change}\r\n          value={props.value}\r\n          className={\"textarea \" + invalidClass}\r\n          {...props.config}\r\n        />\r\n      );\r\n      break;\r\n    default:\r\n      inputElement = (\r\n        <input\r\n          onChange={props.change}\r\n          value={props.value}\r\n          className={\"input \" + invalidClass}\r\n          {...props.config}\r\n        />\r\n      );\r\n  }\r\n  return (\r\n    <div className=\"field\">\r\n      <label className=\"label\">{props.label}</label>\r\n      <div className=\"control\">{inputElement}</div>\r\n    </div>\r\n  );\r\n}\r\n","import Axios from \"axios\";\r\nimport React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { withRouter } from \"react-router\";\r\nimport Input from \"../../components/UI/Input/Input\";\r\nimport Loader from \"../../components/UI/Loader/Loader\";\r\nimport * as actionTypes from \"../../store/actions/actions\";\r\nclass Checkout extends Component {\r\n  state = {\r\n    orderForm: {\r\n      Name: {\r\n        elementType: \"input\",\r\n        value: \"\",\r\n        touched: false,\r\n        valid: false,\r\n        validation: {\r\n          required: true,\r\n          maxlength: 30,\r\n        },\r\n        elementConfig: {\r\n          type: \"text\",\r\n          placeholder: \"Your name \",\r\n        },\r\n      },\r\n      \"Contact No\": {\r\n        elementType: \"input\",\r\n        value: \"\",\r\n        touched: false,\r\n        valid: false,\r\n        validation: {\r\n          required: true,\r\n          maxlength: 20,\r\n        },\r\n        elementConfig: {\r\n          type: \"number\",\r\n          placeholder: \"Your contact number\",\r\n        },\r\n      },\r\n      Address: {\r\n        elementType: \"textarea\",\r\n        value: \"\",\r\n        touched: false,\r\n        valid: false,\r\n        validation: {\r\n          required: true,\r\n        },\r\n        elementConfig: {\r\n          type: \"text\",\r\n          placeholder: \"Your complete address\",\r\n        },\r\n      },\r\n    },\r\n    orderFormIsValid: false,\r\n    isLoading: false,\r\n  };\r\n\r\n  checkValidity = (rules, value) => {\r\n    let isValid = true;\r\n    if (rules.maxlength) {\r\n      isValid = value.length <= rules.maxlength && isValid;\r\n    }\r\n    if (rules.required) {\r\n      isValid = value.trim() !== \"\" && isValid;\r\n    }\r\n    return isValid;\r\n  };\r\n  inputChangehandler = (inputIdentifier, event) => {\r\n    const updatedOrderForm = {\r\n      ...this.state.orderForm,\r\n    };\r\n    const updatedFormElement = {\r\n      ...updatedOrderForm[inputIdentifier],\r\n    };\r\n    updatedFormElement.value = event.target.value;\r\n    updatedOrderForm[inputIdentifier] = updatedFormElement;\r\n    updatedFormElement.valid = this.checkValidity(\r\n      updatedFormElement.validation,\r\n      updatedFormElement.value\r\n    );\r\n    updatedFormElement.touched = true;\r\n    let isFormValid = true;\r\n    for (let item in updatedOrderForm) {\r\n      if (!updatedOrderForm[item].valid) {\r\n        isFormValid = false;\r\n        break;\r\n      }\r\n    }\r\n    this.setState({\r\n      orderForm: updatedOrderForm,\r\n      orderFormIsValid: isFormValid,\r\n    });\r\n  };\r\n  orderHandler = () => {\r\n    // make a object with burger details and delivery information and total price\r\n    const formData = {};\r\n    // adding burgerInfo\r\n    formData.burgerIngredients = this.props.ingredients;\r\n    // adding total price\r\n    formData.totalPrice = this.props.totalPrice;\r\n    // adding delivery Instructions\r\n    formData.deliveryDetials = {};\r\n    Object.keys(this.state.orderForm).map((item) => {\r\n      formData.deliveryDetials[item] = this.state.orderForm[item].value;\r\n    });\r\n    let finalFormData = {};\r\n    finalFormData[this.props.userEmail] = formData;\r\n    console.log(formData);\r\n    this.setState({ isLoading: true });\r\n    console.log(this.props.userId);\r\n    Axios.post(\r\n      `https://recipe-app-ab93d.firebaseio.com/orders/${this.props.userId}.json?auth=${this.props.token}`,\r\n      formData\r\n    ).then(\r\n      (response) => {\r\n        this.props.resetBurger();\r\n        this.props.history.push(\"/\");\r\n      },\r\n      (error) => {\r\n        this.setState({ isLoading: false });\r\n      }\r\n    );\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"hero is-fullheight\">\r\n        <div className=\"hero-body\">\r\n          <div className=\"container\">\r\n            <div className=\"columns is-centered\">\r\n              {this.state.isLoading ? (\r\n                <Loader />\r\n              ) : (\r\n                <div className=\"column is-7\">\r\n                  <p className=\"is-size-3 has-text-weight-semibold mb-3\">\r\n                    Where should we deliver you delicious burger ?\r\n                  </p>\r\n                  {Object.keys(this.state.orderForm).map((item) => {\r\n                    return (\r\n                      <Input\r\n                        key={item}\r\n                        valid={this.state.orderForm[item].valid}\r\n                        label={item}\r\n                        config={this.state.orderForm[item].elementConfig}\r\n                        value={this.state.orderForm[item].value}\r\n                        elementType={this.state.orderForm[item].elementType}\r\n                        touched={this.state.orderForm[item].touched}\r\n                        change={this.inputChangehandler.bind(this, item)}\r\n                      />\r\n                    );\r\n                  })}\r\n\r\n                  <div className=\"buttons mt-5\">\r\n                    <button\r\n                      disabled={!this.state.orderFormIsValid}\r\n                      onClick={this.orderHandler}\r\n                      className=\" button is-fullwidth is-success is-light is-outlined is-large\"\r\n                    >\r\n                      Confirm Order\r\n                    </button>\r\n                    <button\r\n                      // onClick={this.props.}\r\n                      className=\" button is-fullwidth is-danger is-light is-outlined is-large\"\r\n                      onClick={() => {\r\n                        this.props.history.push(\"/\");\r\n                      }}\r\n                    >\r\n                      Cancel Order\r\n                    </button>\r\n                  </div>\r\n                </div>\r\n              )}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    ingredients: state.burger.ingredients,\r\n    totalPrice: state.burger.totalPrice,\r\n    token: state.auth.authToken,\r\n    userId: state.auth.userId,\r\n  };\r\n};\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    resetBurger: () => {\r\n      dispatch({\r\n        type: actionTypes.RESET_BURGER,\r\n      });\r\n    },\r\n  };\r\n};\r\nexport default withRouter(\r\n  connect(mapStateToProps, mapDispatchToProps)(Checkout)\r\n);\r\n"],"sourceRoot":""}